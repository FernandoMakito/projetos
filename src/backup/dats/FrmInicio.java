/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package backup.dats;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.StandardCopyOption;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import net.lingala.zip4j.core.ZipFile;
import net.lingala.zip4j.exception.ZipException;
import net.lingala.zip4j.model.ZipParameters;
import net.lingala.zip4j.progress.ProgressMonitor;
import net.lingala.zip4j.util.Zip4jConstants;

/**
 *
 * @author fernando
 */
public class FrmInicio extends javax.swing.JFrame {

    /**
     * Creates new form frmInicio
     */
    int qtdFiles;

    public FrmInicio() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grupoCompactacao = new javax.swing.ButtonGroup();
        btSelecionar = new javax.swing.JButton();
        txtOrigem = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaArquivos = new javax.swing.JTable();
        txtQtdArquivos = new javax.swing.JLabel();
        lblTipo = new javax.swing.JLabel();
        ckDat = new javax.swing.JCheckBox();
        ckHdr = new javax.swing.JCheckBox();
        ckTag = new javax.swing.JCheckBox();
        ckK = new javax.swing.JCheckBox();
        ckFlx = new javax.swing.JCheckBox();
        ckFr3 = new javax.swing.JCheckBox();
        salvaBackup = new javax.swing.JButton();
        txtDestino = new javax.swing.JTextField();
        progresso = new javax.swing.JProgressBar();
        statusSistema = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        radioBaixa = new javax.swing.JRadioButtonMenuItem();
        radioNormal = new javax.swing.JRadioButtonMenuItem();
        radioAlta = new javax.swing.JRadioButtonMenuItem();
        radioUltra = new javax.swing.JRadioButtonMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Makito Backup 1.0.0");
        setLocationByPlatform(true);
        setResizable(false);
        addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                formInputMethodTextChanged(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        btSelecionar.setText("Selecionar");
        btSelecionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSelecionarActionPerformed(evt);
            }
        });

        txtOrigem.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtOrigem.setText("Pasta do Sistema");
        txtOrigem.setAutoscrolls(false);
        txtOrigem.setMaximumSize(new java.awt.Dimension(88, 20));
        txtOrigem.setName("txtCaminhoOrigem"); // NOI18N
        txtOrigem.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtOrigemFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtOrigemFocusLost(evt);
            }
        });
        txtOrigem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtOrigemActionPerformed(evt);
            }
        });
        txtOrigem.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtOrigemKeyReleased(evt);
            }
        });

        tabelaArquivos.setAutoCreateRowSorter(true);
        tabelaArquivos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Selec", "Arquivo", "Tamanho (KB)"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Object.class, java.lang.Long.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaArquivos.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_LAST_COLUMN);
        tabelaArquivos.setMaximumSize(new java.awt.Dimension(80, 0));
        tabelaArquivos.getTableHeader().setReorderingAllowed(false);
        tabelaArquivos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tabelaArquivosMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tabelaArquivos);
        if (tabelaArquivos.getColumnModel().getColumnCount() > 0) {
            tabelaArquivos.getColumnModel().getColumn(0).setResizable(false);
            tabelaArquivos.getColumnModel().getColumn(0).setPreferredWidth(1);
            tabelaArquivos.getColumnModel().getColumn(1).setResizable(false);
            tabelaArquivos.getColumnModel().getColumn(1).setPreferredWidth(190);
            tabelaArquivos.getColumnModel().getColumn(2).setResizable(false);
        }

        txtQtdArquivos.setText("0 arquivos");

        lblTipo.setText("Tipos de arquivos");

        ckDat.setSelected(true);
        ckDat.setText(".DAT");
        ckDat.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                ckDatStateChanged(evt);
            }
        });
        ckDat.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                ckDatMouseReleased(evt);
            }
        });

        ckHdr.setText(".HDR");
        ckHdr.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                ckHdrStateChanged(evt);
            }
        });
        ckHdr.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                ckHdrMouseReleased(evt);
            }
        });

        ckTag.setText(".TAG");
        ckTag.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                ckTagStateChanged(evt);
            }
        });
        ckTag.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                ckTagMouseReleased(evt);
            }
        });

        ckK.setText(".K");
        ckK.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                ckKStateChanged(evt);
            }
        });
        ckK.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                ckKMouseReleased(evt);
            }
        });

        ckFlx.setText(".FLX");
        ckFlx.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                ckFlxMouseReleased(evt);
            }
        });

        ckFr3.setSelected(true);
        ckFr3.setText(".FR3");
        ckFr3.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                ckFr3StateChanged(evt);
            }
        });
        ckFr3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                ckFr3MouseReleased(evt);
            }
        });

        salvaBackup.setText("Salvar backup");
        salvaBackup.setEnabled(false);
        salvaBackup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salvaBackupActionPerformed(evt);
            }
        });

        txtDestino.setText("jTextField1");
        txtDestino.setUI(null);

        statusSistema.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        statusSistema.setText("   ");

        jMenu3.setText("Compactação");

        grupoCompactacao.add(radioBaixa);
        radioBaixa.setText("Baixa (Rápida)");
        radioBaixa.setName("baixa"); // NOI18N
        radioBaixa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioBaixaActionPerformed(evt);
            }
        });
        jMenu3.add(radioBaixa);

        grupoCompactacao.add(radioNormal);
        radioNormal.setSelected(true);
        radioNormal.setText("Normal");
        radioNormal.setName("normal"); // NOI18N
        jMenu3.add(radioNormal);

        grupoCompactacao.add(radioAlta);
        radioAlta.setText("Alta");
        radioAlta.setName("alta"); // NOI18N
        jMenu3.add(radioAlta);

        grupoCompactacao.add(radioUltra);
        radioUltra.setText("Ultra (Lenta)");
        radioUltra.setName("ultra"); // NOI18N
        jMenu3.add(radioUltra);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addComponent(txtDestino)
                        .addGap(111, 111, 111))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtQtdArquivos, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(salvaBackup, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtOrigem, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btSelecionar, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(ckDat)
                                        .addGap(18, 18, 18)
                                        .addComponent(ckFr3)
                                        .addGap(18, 18, 18)
                                        .addComponent(ckFlx)
                                        .addGap(18, 18, 18)
                                        .addComponent(ckHdr)
                                        .addGap(18, 18, 18)
                                        .addComponent(ckK)
                                        .addGap(18, 18, 18)
                                        .addComponent(ckTag))
                                    .addComponent(lblTipo)
                                    .addComponent(progresso, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(statusSistema, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btSelecionar)
                    .addComponent(txtOrigem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addComponent(lblTipo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ckDat)
                    .addComponent(ckHdr)
                    .addComponent(ckK)
                    .addComponent(ckFr3)
                    .addComponent(ckFlx)
                    .addComponent(ckTag))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtDestino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtQtdArquivos)
                        .addComponent(salvaBackup)))
                .addGap(10, 10, 10)
                .addComponent(progresso, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusSistema))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    @SuppressWarnings("empty-statement")
    private void btSelecionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSelecionarActionPerformed
        // TODO add your handling code here:
        String caminho = selecionaPasta();
        if (!"".equals(caminho)) {
            txtOrigem.setText(caminho);
            listaArquivos();
        }
    }//GEN-LAST:event_btSelecionarActionPerformed

    private void txtOrigemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtOrigemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtOrigemActionPerformed

    private void txtOrigemFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtOrigemFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_txtOrigemFocusLost

    private void formInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_formInputMethodTextChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_formInputMethodTextChanged

    private void tabelaArquivosMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaArquivosMouseReleased
        // TODO add your handling code here:
        atualizaQtdFiles();
    }//GEN-LAST:event_tabelaArquivosMouseReleased

    private void ckDatStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_ckDatStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_ckDatStateChanged

    private void ckHdrStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_ckHdrStateChanged
        // TODO add your handling code here:    
    }//GEN-LAST:event_ckHdrStateChanged

    private void ckTagStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_ckTagStateChanged
        // TODO add your handling code here:  
    }//GEN-LAST:event_ckTagStateChanged

    private void ckKStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_ckKStateChanged
        // TODO add your handling code here:  
    }//GEN-LAST:event_ckKStateChanged

    private void ckFr3StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_ckFr3StateChanged
        // TODO add your handling code here:     
    }//GEN-LAST:event_ckFr3StateChanged

    private void salvaBackupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salvaBackupActionPerformed
        // TODO add your handling code here:
        String caminho = selecionaCaminhoDestino();
        txtDestino.setText(caminho);
        if (!"".equals(caminho)) {
            copiarArquivos();
        }

    }//GEN-LAST:event_salvaBackupActionPerformed

    private void ckFlxMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ckFlxMouseReleased
        // TODO add your handling code here:
        listaArquivos();
    }//GEN-LAST:event_ckFlxMouseReleased

    private void ckDatMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ckDatMouseReleased
        // TODO add your handling code here:
        listaArquivos();
    }//GEN-LAST:event_ckDatMouseReleased

    private void ckHdrMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ckHdrMouseReleased
        // TODO add your handling code here:
        listaArquivos();
    }//GEN-LAST:event_ckHdrMouseReleased

    private void ckTagMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ckTagMouseReleased
        // TODO add your handling code here:
        listaArquivos();
    }//GEN-LAST:event_ckTagMouseReleased

    private void ckKMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ckKMouseReleased
        // TODO add your handling code here:
        listaArquivos();
    }//GEN-LAST:event_ckKMouseReleased

    private void ckFr3MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ckFr3MouseReleased
        // TODO add your handling code here:
        listaArquivos();
    }//GEN-LAST:event_ckFr3MouseReleased

    private void txtOrigemKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtOrigemKeyReleased
        // TODO add your handling code here:
        listaArquivos();
    }//GEN-LAST:event_txtOrigemKeyReleased

    private void radioBaixaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioBaixaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_radioBaixaActionPerformed

    private void txtOrigemFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtOrigemFocusGained
        // TODO add your handling code here:
        //txtOrigem.selectAll();
    }//GEN-LAST:event_txtOrigemFocusGained

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        try {
            // TODO add your handling code here:
            String caminhoAtual = getAtualPath();
            if (caminhoAtual.toLowerCase().contains("sis_lj") || caminhoAtual.toLowerCase().contains("makito")) {
                txtOrigem.setText(getAtualPath());
                listaArquivos();
            } else {
                txtOrigem.selectAll();
            }
        } catch (IOException ex) {
            Logger.getLogger(FrmInicio.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_formWindowOpened
    private String getAtualPath() throws IOException {
        String path = new File(".").getCanonicalPath();
        return path;
    }

    private String dataBackup() {
        Date date = new Date();
        LocalDate localDate = date.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
        int year = localDate.getYear();
        int month = localDate.getMonthValue();
        int day = localDate.getDayOfMonth();
        String data = String.valueOf(day) + "" + String.valueOf(month) + "" + String.valueOf(year);
        return data;
    }

    private void copiarArquivos() {
        new Thread(new Runnable() {
            public void run() {
                //desabilitar botoes
                habilitaComandos(false);
                String pastaOrigem = txtOrigem.getText();
                String pastaDestino = txtDestino.getText();
                File f = new File(pastaDestino);
                pastaDestino = f.getParent();
                String nomeArquivo = f.getName();
                DefaultTableModel model = (DefaultTableModel) tabelaArquivos.getModel();
                Boolean selec;
                qtdFiles = model.getRowCount();
                int filesCopiadas = 0;
                progresso.setMaximum(qtdFiles);
                //cria pasta Temp
                Boolean criar = (new File(pastaDestino + "\\" + "backupMakito")).mkdirs();
                File fastfolder = new File(pastaDestino + "\\" + "backupMakito\\fastreport");
                for (int i = 0; i < qtdFiles; i++) {
                    try {
                        selec = (Boolean) model.getValueAt(i, 0);
                        if (selec) {
                            String file = (String) model.getValueAt(i, 1);
                            File source, dest;
                            if (getFileExtension(file).toLowerCase().contains("fr3")) {
                                if (!fastfolder.isDirectory()) {
                                    Boolean criarFast = (new File(pastaDestino + "\\" + "backupMakito\\fastreport")).mkdirs();
                                }
                                source = new File(pastaOrigem + "\\fastreport\\" + file);
                                dest = new File(pastaDestino + "\\" + "backupMakito" + "\\fastreport\\" + file);
                            } else {
                                source = new File(pastaOrigem + "\\" + file);
                                dest = new File(pastaDestino + "\\" + "backupMakito" + "\\" + file);
                            }
                            Files.copy(source.toPath(), dest.toPath(), StandardCopyOption.REPLACE_EXISTING);
                            statusSistema.setText("Copiando " + file + "  " + filesCopiadas + " de " + qtdFiles);
                            filesCopiadas++;
                        }
                        progresso.setValue(i + 1);
                    } catch (IOException e) {
                        e.printStackTrace();
                        statusSistema.setText("Ops, ocorreu algum erro ao copiar");
                    }
                }
                statusSistema.setText("Copia de arquivos finalizada");
                compactar(txtDestino.getText(), pastaDestino);
            }

        }).start();
        // FileUtils.copyDirectory(source, dest);
    }

    private int tipoCompactacao() {
        if (radioBaixa.isSelected()) {
            return 1;
        } else if (radioNormal.isSelected()) {
            return 5;
        } else if (radioAlta.isSelected()) {
            return 7;
        } else if (radioUltra.isSelected()) {
            return 9;
        } else {
            return 3;
        }
    }

    private void compactar(String destination, String source) {
        statusSistema.setText("Criando arquivo compactado");
        progresso.setIndeterminate(true);
        try {
            ZipFile zipFile = new ZipFile(destination);
            ZipParameters parameters = new ZipParameters();
            parameters.setCompressionMethod(Zip4jConstants.COMP_DEFLATE);
            parameters.setCompressionLevel(tipoCompactacao());
            File folder = new File(source + "\\backupMakito\\");
            File[] listOfFiles = folder.listFiles();
            ArrayList filesToAdd = new ArrayList();
            filesToAdd.addAll(Arrays.asList(listOfFiles));
            if (ckFr3.isSelected()) {
                zipFile.addFolder(source + "\\backupMakito\\fastreport", parameters);
            }
            zipFile.addFiles(filesToAdd, parameters);
        } catch (ZipException e) {
            statusSistema.setText("Ops, ocorreu algum erro ao compactar");
        }
        statusSistema.setText("Arquivo compactado criado");
        apagaPasta(new File(source + "\\backupMakito"));
    }

    private void apagaPasta(File folder) {
        statusSistema.setText("Apagando arquivos temporários");

        File[] listOfFiles = folder.listFiles();
        for (File listOfFile : listOfFiles) {
            if (listOfFile.isFile()) {
                listOfFile.delete();
            }
        }
        if (ckFr3.isSelected()) {
            File[] pastaFast = new File(folder.getAbsolutePath() + "//fastreport").listFiles();
            for (File listOfFile : pastaFast) {
                if (listOfFile.isFile()) {
                    listOfFile.delete();
                }
            }
        }
        statusSistema.setText("Arquivos temporários apagados");
        progresso.setIndeterminate(false);
        boolean succes = (new File(folder.getAbsolutePath() + "//fastreport")).delete();
        boolean success = (new File(folder.getAbsolutePath())).delete();

        habilitaComandos(true);
        statusSistema.setText("Backup concluido ;)");
        JOptionPane.showMessageDialog(this, "Backup finalizado!");
    }

    private void habilitaComandos(Boolean ativa) {
        txtOrigem.setEnabled(ativa);
        salvaBackup.setEnabled(ativa);
        btSelecionar.setEnabled(ativa);
        ckFr3.setEnabled(ativa);
        ckDat.setEnabled(ativa);
        ckFlx.setEnabled(ativa);
        ckHdr.setEnabled(ativa);
        ckK.setEnabled(ativa);
        ckTag.setEnabled(ativa);
        tabelaArquivos.setEnabled(ativa);
        jMenu3.setEnabled(ativa);
    }

    private String selecionaPasta() {
        JFileChooser j = new JFileChooser(new File("."));
        j.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        j.setDialogTitle("Selecione a pasta do sistema");
        j.setApproveButtonText("Selecionar Pasta");
        j.setAcceptAllFileFilterUsed(false);
        Integer opt = j.showOpenDialog(this);
        if (opt == 0) {
            return j.getSelectedFile().getAbsolutePath();
        } else {
            return "";
        }
    }

    private String selecionaCaminhoDestino() {
        JFileChooser j = new JFileChooser(new File("."));
        j.setDialogType(JFileChooser.SAVE_DIALOG);
        j.setDialogTitle("Salvar arquivo de backup");
        String nome = "backup"+dataBackup()+".zip";
        j.setSelectedFile(new File(nome));
        j.setFileFilter(new FileNameExtensionFilter("Arquivo ZIP", "ZIP"));
        Integer opt = j.showSaveDialog(this);
        if (opt == 0) {
            File selec = new File(j.getSelectedFile().getAbsolutePath());
            if (!selec.exists()) {
                String arquivoSelecionado = j.getSelectedFile().getAbsolutePath();
               if(!"zip".equals(getFileExtension(arquivoSelecionado).toLowerCase())){
                arquivoSelecionado = arquivoSelecionado + ".zip";
               }
               return arquivoSelecionado;
            } else {
                JOptionPane.showMessageDialog(this, "Já existe um arquivo com esse nome nessa pasta \n Renomeie e salve novamente!");
                return "";
            }
        } else {
            return "";
        }
    }

    private void listaArquivos() {
        String caminho = txtOrigem.getText();
        File folder = new File(caminho);
        if (folder.isDirectory()) {
            File[] listOfFiles = folder.listFiles();
            DefaultTableModel model = (DefaultTableModel) tabelaArquivos.getModel();
            model.setRowCount(0);
            for (File listOfFile : listOfFiles) {
                if (listOfFile.isFile()) {
                    if (filtraArquivos(listOfFile.getName())) {
                        model.addRow(new Object[]{true, listOfFile.getName(), (listOfFile.length() / 1024)});
                    }
                }
            }
            if (ckFr3.isSelected()) {
                File folderFast = new File(caminho + "//fastreport");
                if (folderFast.isDirectory()) {
                    File[] listOfFilesFast = folderFast.listFiles();
                    for (File listOfFileFast : listOfFilesFast) {
                        if (listOfFileFast.isFile()) {
                            if (filtraArquivos(listOfFileFast.getName())) {
                                model.addRow(new Object[]{true, listOfFileFast.getName(), (listOfFileFast.length() / 1024)});
                            }
                        }
                    }
                }
            }

            atualizaQtdFiles();
        }
    }

    private void atualizaQtdFiles() {
        DefaultTableModel model = (DefaultTableModel) tabelaArquivos.getModel();
        qtdFiles = model.getRowCount();
        for (int i = 0; i < qtdFiles; i++) {
            Boolean s = (Boolean) model.getValueAt(i, 0);
            if (!s) {
                qtdFiles--;
            }
        }
        txtQtdArquivos.setText(String.valueOf(qtdFiles) + " arquivos selecionados");
        if (qtdFiles == 0) {
            JOptionPane.showMessageDialog(this, "Nenhum arquivo encontrado nessa pasta, \nSelecione a pasta do sistema e a extensão desejada");
            salvaBackup.setEnabled(false);
        } else {
            salvaBackup.setEnabled(true);
        }

    }

    private boolean filtraArquivos(String nome) {
        String ext = getFileExtension(nome).toLowerCase();
        if (ext.equals("dat") && ckDat.isSelected()) {
            return true;
        } else if (ext.equals("hdr") && ckHdr.isSelected()) {
            return true;
        } else if (ext.equals("tag") && ckTag.isSelected()) {
            return true;
        } else if (ext.equals("flx") && ckFlx.isSelected()) {
            return true;
        } else if (ext.contains("k") && ckK.isSelected()) {
            return true;
        } else if (ext.equals("fr3") && ckFr3.isSelected()) {
            return true;
        }
        return false;
    }

    private String getFileExtension(String name) {
        try {
            return name.substring(name.lastIndexOf(".") + 1);
        } catch (Exception e) {
            return "";
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmInicio.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmInicio.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmInicio.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmInicio.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmInicio().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btSelecionar;
    private javax.swing.JCheckBox ckDat;
    private javax.swing.JCheckBox ckFlx;
    private javax.swing.JCheckBox ckFr3;
    private javax.swing.JCheckBox ckHdr;
    private javax.swing.JCheckBox ckK;
    private javax.swing.JCheckBox ckTag;
    private javax.swing.ButtonGroup grupoCompactacao;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblTipo;
    private javax.swing.JProgressBar progresso;
    private javax.swing.JRadioButtonMenuItem radioAlta;
    private javax.swing.JRadioButtonMenuItem radioBaixa;
    private javax.swing.JRadioButtonMenuItem radioNormal;
    private javax.swing.JRadioButtonMenuItem radioUltra;
    private javax.swing.JButton salvaBackup;
    private javax.swing.JLabel statusSistema;
    private javax.swing.JTable tabelaArquivos;
    private javax.swing.JTextField txtDestino;
    private javax.swing.JTextField txtOrigem;
    private javax.swing.JLabel txtQtdArquivos;
    // End of variables declaration//GEN-END:variables
}
