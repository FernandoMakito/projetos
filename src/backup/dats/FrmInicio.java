/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package backup.dats;

import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.nio.file.Files;
import java.nio.file.StandardCopyOption;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import net.lingala.zip4j.core.ZipFile;
import net.lingala.zip4j.exception.ZipException;
import net.lingala.zip4j.model.ZipParameters;
import net.lingala.zip4j.util.Zip4jConstants;

/**
 *
 * @author fernando
 */
public class FrmInicio extends javax.swing.JFrame {

    /**
     * Creates new form frmInicio
     */
    int qtdFiles;
    long tamanhoArquivos;
    List<String> extSelecionadas;
    List<String> pastasIgnoradas;

    public FrmInicio() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btSelecionar = new javax.swing.JButton();
        txtOrigem = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaArquivos = new javax.swing.JTable();
        txtQtdArquivos = new javax.swing.JLabel();
        salvaBackup = new javax.swing.JButton();
        txtDestino = new javax.swing.JTextField();
        progresso = new javax.swing.JProgressBar();
        statusSistema = new javax.swing.JLabel();
        btExtensoes = new javax.swing.JButton();
        txtExtSelecionandas = new javax.swing.JLabel();
        btIgnoraPasta = new javax.swing.JButton();
        lblPostgres = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Makito Backup");
        setLocationByPlatform(true);
        setResizable(false);
        addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                formInputMethodTextChanged(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        btSelecionar.setText("Selecionar");
        btSelecionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSelecionarActionPerformed(evt);
            }
        });

        txtOrigem.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtOrigem.setText("Pasta do Sistema");
        txtOrigem.setAutoscrolls(false);
        txtOrigem.setMaximumSize(new java.awt.Dimension(88, 20));
        txtOrigem.setName("txtCaminhoOrigem"); // NOI18N
        txtOrigem.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtOrigemFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtOrigemFocusLost(evt);
            }
        });
        txtOrigem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtOrigemActionPerformed(evt);
            }
        });
        txtOrigem.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtOrigemKeyReleased(evt);
            }
        });

        tabelaArquivos.setAutoCreateRowSorter(true);
        tabelaArquivos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Selec", "Arquivo", "Tamanho (KB)"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Object.class, java.lang.Long.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaArquivos.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_LAST_COLUMN);
        tabelaArquivos.setMaximumSize(new java.awt.Dimension(80, 0));
        tabelaArquivos.getTableHeader().setReorderingAllowed(false);
        tabelaArquivos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tabelaArquivosMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tabelaArquivos);
        if (tabelaArquivos.getColumnModel().getColumnCount() > 0) {
            tabelaArquivos.getColumnModel().getColumn(0).setResizable(false);
            tabelaArquivos.getColumnModel().getColumn(0).setPreferredWidth(1);
            tabelaArquivos.getColumnModel().getColumn(1).setPreferredWidth(190);
        }

        txtQtdArquivos.setText("0 arquivos");

        salvaBackup.setText("Salvar backup");
        salvaBackup.setEnabled(false);
        salvaBackup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salvaBackupActionPerformed(evt);
            }
        });

        txtDestino.setText("jTextField1");
        txtDestino.setUI(null);
        txtDestino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDestinoActionPerformed(evt);
            }
        });

        progresso.setToolTipText("");
        progresso.setBorderPainted(false);
        progresso.setFocusable(false);

        statusSistema.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        statusSistema.setText("   ");

        btExtensoes.setText("Selecionar Extensões");
        btExtensoes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btExtensoesActionPerformed(evt);
            }
        });

        txtExtSelecionandas.setText("Não há extensões selecionadas");

        btIgnoraPasta.setText("Ignorar SubPastas");
        btIgnoraPasta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btIgnoraPastaActionPerformed(evt);
            }
        });

        lblPostgres.setForeground(new java.awt.Color(0, 51, 255));

        jMenu1.setText("Configurar");
        jMenu1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu1MouseClicked(evt);
            }
        });
        jMenu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu1ActionPerformed(evt);
            }
        });
        jMenuBar1.add(jMenu1);

        jMenu2.setText("teste");
        jMenu2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu2MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addComponent(txtDestino)
                        .addGap(111, 111, 111))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtQtdArquivos, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(salvaBackup, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtOrigem, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btSelecionar, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(progresso, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(statusSistema, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btExtensoes)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtExtSelecionandas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(28, 28, 28)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btIgnoraPasta)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(lblPostgres)))))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btSelecionar)
                    .addComponent(txtOrigem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btExtensoes)
                    .addComponent(btIgnoraPasta))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtExtSelecionandas)
                    .addComponent(lblPostgres))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtDestino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtQtdArquivos)
                        .addComponent(salvaBackup)))
                .addGap(10, 10, 10)
                .addComponent(progresso, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusSistema))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    @SuppressWarnings("empty-statement")
    private void btSelecionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSelecionarActionPerformed
        // TODO add your handling code here:
        String caminho = selecionaPasta();
        if (!"".equals(caminho)) {
            txtOrigem.setText(caminho);
            try {
                listaArquivos();
            } catch (IOException ex) {
                Logger.getLogger(FrmInicio.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btSelecionarActionPerformed

    private void txtOrigemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtOrigemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtOrigemActionPerformed

    private void txtOrigemFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtOrigemFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_txtOrigemFocusLost

    private void formInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_formInputMethodTextChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_formInputMethodTextChanged

    private void tabelaArquivosMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaArquivosMouseReleased
        // TODO add your handling code here:
        atualizaQtdFiles();
    }//GEN-LAST:event_tabelaArquivosMouseReleased

    private void salvaBackupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salvaBackupActionPerformed
        try {
            // TODO add your handling code here:
            selecionaCaminhoDestino();
        } catch (IOException | InterruptedException ex) {
            Logger.getLogger(FrmInicio.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_salvaBackupActionPerformed

    private void txtOrigemKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtOrigemKeyReleased
        try {
            // TODO add your handling code here:
            listaArquivos();
        } catch (IOException ex) {
            Logger.getLogger(FrmInicio.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_txtOrigemKeyReleased

    private void txtOrigemFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtOrigemFocusGained
        // TODO add your handling code here:
        //txtOrigem.selectAll();
    }//GEN-LAST:event_txtOrigemFocusGained

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        try {
            // TODO add your handling code here:
            Configuracoes cfg = new Configuracoes();
            String origem = cfg.getPropriedade("pasta_origem");
            txtOrigem.setText(origem);
            txtDestino.setText(cfg.getPropriedade("pasta_destino"));
            ePostgres();
            if (txtOrigem.getText().equals("")) {
                String caminhoAtual = getAtualPath();
                if (caminhoAtual.toLowerCase().contains("sis_lj") || caminhoAtual.toLowerCase().contains("makito")) {
                    txtOrigem.setText(getAtualPath());
                } else {
                    txtOrigem.setText("Pasta do sistema");
                    txtOrigem.selectAll();
                }
            }
            getExtSelecionadas();
            listaArquivos();
        } catch (IOException ex) {
            Logger.getLogger(FrmInicio.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_formWindowOpened

    private void jMenu1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu1MouseClicked
        // TODO add your handling code here:
        FrmConfig frm = new FrmConfig();
        frm.setVisible(true);
        frm.addComponentListener(new ComponentAdapter() {
            public void componentHidden(ComponentEvent e) {
                try {
                    ePostgres();
                } catch (IOException ex) {
                    Logger.getLogger(FrmInicio.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }//GEN-LAST:event_jMenu1MouseClicked

    private void txtDestinoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDestinoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDestinoActionPerformed

    private void jMenu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu1ActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_jMenu1ActionPerformed
    private void jMenu2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu2MouseClicked
        try {
            executaInicio();
        } catch (IOException | InterruptedException ex) {
            Logger.getLogger(FrmInicio.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        try {
            executaDepois();
        } catch (IOException | InterruptedException ex) {
            Logger.getLogger(FrmInicio.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenu2MouseClicked

    private void btExtensoesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btExtensoesActionPerformed
        // TODO add your handling code here:
        FrmExtensoes frm = new FrmExtensoes();
        frm.setVisible(true);
        frm.addComponentListener(new ComponentAdapter() {
            public void componentHidden(ComponentEvent e) {
                try {
                    getExtSelecionadas();
                    listaArquivos();
                } catch (IOException ex) {
                    Logger.getLogger(FrmInicio.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }//GEN-LAST:event_btExtensoesActionPerformed

    private void btIgnoraPastaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btIgnoraPastaActionPerformed
        FrmSubPastas frm = new FrmSubPastas();
        frm.setVisible(true);
        frm.addComponentListener(new ComponentAdapter() {
            public void componentHidden(ComponentEvent e) {
                try {
                    getExtSelecionadas();
                    listaArquivos();
                } catch (IOException ex) {
                    Logger.getLogger(FrmInicio.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }//GEN-LAST:event_btIgnoraPastaActionPerformed
    private String getAtualPath() throws IOException {
        String path = new File(".").getCanonicalPath();
        return path;
    }

    private void executaComandos(String arquivo) throws IOException, InterruptedException {
        final Process p = Runtime.getRuntime().exec("cmd /c start " + arquivo);
        new Thread(new Runnable() {
            @Override
            public void run() {
                BufferedReader input = new BufferedReader(new InputStreamReader(p.getInputStream()));
                String line = null;
                try {
                    while ((line = input.readLine()) != null) {
                        System.out.println(line);
                    }
                } catch (IOException e) {
                    e.getLocalizedMessage();
                }
            }
        }).start();
        p.waitFor(30, TimeUnit.SECONDS);
        statusSistema.setText("");
    }

    private void executaInicio() throws UnsupportedEncodingException, IOException, InterruptedException {
        Configuracoes cfg = new Configuracoes();
        String comando = cfg.getPropriedade("executa_antes");
        if (new File(comando).exists()) {
            statusSistema.setText("Executando script antes do backup");
            executaComandos(comando);
        }
    }

    private void executaDepois() throws UnsupportedEncodingException, IOException, InterruptedException {
        Configuracoes cfg = new Configuracoes();
        String comando = cfg.getPropriedade("executa_depois");
        if (new File(comando).exists()) {
            statusSistema.setText("Executando script depois do backup");
            executaComandos(comando);
        }
    }

    private String dataBackup() {
        Date date = new Date();
        LocalDate localDate = date.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
        int year = localDate.getYear();
        int month = localDate.getMonthValue();
        int day = localDate.getDayOfMonth();
        String data = String.valueOf(day) + "-" + String.valueOf(month) + "-" + String.valueOf(year);
        return data;
    }

    private void copiarArquivos() {
        new Thread(new Runnable() {
            public void run() {
                //desabilitar botoes
                habilitaComandos(false);
                try {
                    //execute no inicio
                    executaInicio();
                } catch (IOException | InterruptedException ex) {
                    Logger.getLogger(FrmInicio.class.getName()).log(Level.SEVERE, null, ex);
                }
                //copiar arquivos
                String pastaOrigem = txtOrigem.getText();
                String pastaDestino = txtDestino.getText();
                File f = new File(pastaDestino);
                pastaDestino = f.getParent();
                DefaultTableModel model = (DefaultTableModel) tabelaArquivos.getModel();
                Boolean selec;
                qtdFiles = model.getRowCount();
                int filesCopiadas = 0;
                progresso.setMaximum(qtdFiles);
                progresso.setStringPainted(true);
                //cria pasta Temp
                Boolean criar = (new File(pastaDestino + "\\" + "backupMakito")).mkdirs();
                for (int i = 0; i < qtdFiles; i++) {
                    try {
                        selec = (Boolean) model.getValueAt(i, 0);
                        if (selec) {
                            String file = (String) model.getValueAt(i, 1);
                            File source, dest;
                            if (file.contains(" / ")) {
                                criaSubPastas(pastaDestino + "\\" + "backupMakito\\", file);
                            }
                            source = new File(pastaOrigem + "\\" + file.replace(" / ", "\\"));
                            dest = new File(pastaDestino + "\\" + "backupMakito" + "\\" + file.replace(" / ", "\\"));
                            Files.copy(source.toPath(), dest.toPath(), StandardCopyOption.REPLACE_EXISTING);
                            statusSistema.setText("Copiando " + file + "  " + filesCopiadas + " de " + qtdFiles);
                            filesCopiadas++;
                        }
                        progresso.setValue(i + 1);
                    } catch (IOException e) {
                        statusSistema.setText("Ops, ocorreu algum erro ao copiar");
                    }
                }
                statusSistema.setText("Copia de arquivos finalizada");
                progresso.setStringPainted(false);
                try {
                    compactar(txtDestino.getText(), pastaDestino);
                } catch (IOException | InterruptedException ex) {
                    Logger.getLogger(FrmInicio.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

        }).start();
    }

    private void criaSubPastas(String destino, String arquivo) {
        String[] quebra = arquivo.split("/");
        File novaPasta = new File(quebra[0].trim());
        if (!novaPasta.isDirectory()) {
            Boolean criar = (new File(destino + novaPasta)).mkdirs();
        }
    }

    private int tipoCompactacao() throws UnsupportedEncodingException, IOException {
        Configuracoes cfg = new Configuracoes();
        String compac = cfg.getPropriedade("compactacao");
        int valorCompac = 5;
        if (!compac.equals("")) {
            valorCompac = Integer.parseInt(compac);
        }
        return valorCompac;
    }

    private void compactar(String destination, String source) throws IOException, UnsupportedEncodingException, InterruptedException {
        statusSistema.setText("Criando arquivo compactado");
        barraProgresso(true);
        try {
            ZipFile zipFile = new ZipFile(destination);
            ZipParameters parameters = new ZipParameters();
            parameters.setCompressionMethod(Zip4jConstants.COMP_DEFLATE);
            parameters.setCompressionLevel(tipoCompactacao());
            File folder = new File(source + "\\backupMakito\\");
            File[] listOfFiles = folder.listFiles();
            ArrayList filesToAdd = new ArrayList();
            filesToAdd.addAll(Arrays.asList(listOfFiles));
            //adiciona o pastas
            for (File arquivo : listOfFiles) {
                if (arquivo.isDirectory()) {
                    zipFile.addFolder(source + "\\backupMakito\\" + arquivo.getName(), parameters);
                }
            }
            zipFile.addFiles(filesToAdd, parameters);
        } catch (ZipException e) {
            statusSistema.setText("Ops, ocorreu algum erro ao compactar");
        }
        statusSistema.setText("Arquivo compactado criado");
        apagaPasta(new File(source + "\\backupMakito"));
    }

    private void apagaPasta(File folder) throws IOException, UnsupportedEncodingException, InterruptedException {
        statusSistema.setText("Apagando arquivos temporários");
        
        //apaga arquivo postgres Makito
        File postgresBk = new File(txtOrigem.getText() + "\\PostgresMakito" + dataBackup() + ".backup");
        if(postgresBk.exists()){
            postgresBk.delete();
        }
        
        File[] listOfFiles = folder.listFiles();
        ArrayList<String> pastaApagar = new ArrayList<>();
        for (File listOfFile : listOfFiles) {
            if (listOfFile.isFile()) {
                listOfFile.delete();
            } else if (listOfFile.isDirectory()) {
                File[] novaPasta = listOfFile.listFiles();
                pastaApagar.add(listOfFile.getAbsolutePath());
                for (File arquivoInterno : novaPasta) {
                    arquivoInterno.delete();
                }
            }
        }

        //boolean succes = (new File(folder.getAbsolutePath() + "//fastreport")).delete();
        //loop apagar subpastas
        for (String cadaPasta : pastaApagar) {
            boolean success = (new File(cadaPasta)).delete();
        }
        boolean success = (new File(folder.getAbsolutePath())).delete();

        statusSistema.setText("Arquivos temporários apagados");
        barraProgresso(false);

        habilitaComandos(true);

        executaDepois();

        statusSistema.setText("Backup concluido ;)");
        salvaConfig();
        JOptionPane.showMessageDialog(this, "Backup finalizado!");
    }

    private void salvaConfig() throws UnsupportedEncodingException, IOException {
        Configuracoes cfg = new Configuracoes();
        cfg.setPropriedade("pasta_origem", txtOrigem.getText());
        cfg.setPropriedade("pasta_destino", txtDestino.getText());
    }

    private void habilitaComandos(Boolean ativa) {
        txtOrigem.setEnabled(ativa);
        salvaBackup.setEnabled(ativa);
        btSelecionar.setEnabled(ativa);
        tabelaArquivos.setEnabled(ativa);
        btExtensoes.setEnabled(ativa);
        btIgnoraPasta.setEnabled(ativa);
        jMenu1.setEnabled(ativa);
        tabelaArquivos.setEnabled(ativa);
    }

    private String selecionaPasta() {
        String pastaInicial;
        if (!new File(txtOrigem.getText()).isDirectory()) {
            pastaInicial = ".";
        } else {
            pastaInicial = txtOrigem.getText();
        }
        JFileChooser j = new JFileChooser(new File(pastaInicial));
        j.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        j.setDialogTitle("Selecione a pasta do sistema");
        j.setApproveButtonText("Selecionar Pasta");
        j.setAcceptAllFileFilterUsed(false);
        Integer opt = j.showOpenDialog(this);
        if (opt == 0) {
            return j.getSelectedFile().getAbsolutePath();
        } else {
            return "";
        }
    }

    private void selecionaCaminhoDestino() throws IOException, InterruptedException {
        String pastaInicial;
        if (txtDestino.getText().equals("")) {
            pastaInicial = ".";
        } else {
            pastaInicial = txtDestino.getText();
        }
        JFileChooser j = new JFileChooser(new File(pastaInicial).getParent());
        j.setDialogType(JFileChooser.SAVE_DIALOG);
        j.setDialogTitle("Salvar arquivo de backup");
        String nome = "BackupMakito" + dataBackup() + ".zip";
        j.setSelectedFile(new File(nome));
        j.setFileFilter(new FileNameExtensionFilter("Arquivo ZIP", "ZIP"));
        Integer opt = j.showSaveDialog(this);
        if (opt == 0) {
            File selec = new File(j.getSelectedFile().getAbsolutePath());
            if (!selec.exists()) {
                String arquivoSelecionado = j.getSelectedFile().getAbsolutePath();
                if (!"zip".equals(getFileExtension(arquivoSelecionado).toLowerCase())) {
                    arquivoSelecionado = arquivoSelecionado + ".zip";
                }
                txtDestino.setText(arquivoSelecionado);
                if (!ePostgres()) {
                    copiarArquivos();
                } else {
                    while (!conferePostgres()) {
                        conferePostgres();
                    }
                    backupPostgres();
                }
            } else {
                JOptionPane.showMessageDialog(this, "Já existe um arquivo com esse nome nessa pasta \n Renomeie e salve novamente!");
                selecionaCaminhoDestino();
            }
        }
    }

    private boolean ePostgres() throws UnsupportedEncodingException, IOException {
        Configuracoes cfg = new Configuracoes();
        Boolean ep = cfg.getPropriedade("modo").equals("post");
        if (ep) {
            lblPostgres.setText("Backup PostgreSQL");
        } else {
            lblPostgres.setText("");
        }
        return ep;
    }

    private boolean conferePostgres() throws IOException {
        Configuracoes cfg = new Configuracoes();
        boolean tudoOk = true;
        if (cfg.getPropriedade("caminho_post").equals("")) {
            cfg.setPropriedade("caminho_post", JOptionPane.showInputDialog(this, "Qual o endereço do pasta Bin do PostgreSQL?"));
            tudoOk = false;
        }
        if (cfg.getPropriedade("servidor_post").equals("")) {
            cfg.setPropriedade("servidor_post", JOptionPane.showInputDialog(this, "Qual o do servidor PostgreSQL?"));
            tudoOk = false;
        }
        if (cfg.getPropriedade("porta_post").equals("")) {
            cfg.setPropriedade("porta_post", JOptionPane.showInputDialog(this, "Qual a porta do servidor PostgreSQL?"));
            tudoOk = false;
        }
        if (cfg.getPropriedade("usuario_post").equals("")) {
            cfg.setPropriedade("usuario_post", JOptionPane.showInputDialog(this, "Qual o nome do usuário PostgreSQL?"));
            tudoOk = false;
        }
        if (cfg.getPropriedade("senha_post").equals("")) {
            cfg.setPropriedade("senha_post", JOptionPane.showInputDialog(this, "Qual a senha do PostgreSQL?"));
            tudoOk = false;
        }
        if (cfg.getPropriedade("banco_post").equals("")) {
            cfg.setPropriedade("banco_post", JOptionPane.showInputDialog(this, "Qual o nome do banco de dados PostgreSQL?"));
            tudoOk = false;
        }
        return tudoOk;

    }

    private void listaArquivos() throws IOException {
        Thread t = new Thread(new Runnable() {
            public void run() {
                String caminho = txtOrigem.getText();
                statusSistema.setText("Buscando arquivos...");
                barraProgresso(true);
                File folder = new File(caminho);
                tamanhoArquivos = 0;
                if (folder.isDirectory()) {
                    File[] todosArquivos = folder.listFiles();
                    DefaultTableModel model = (DefaultTableModel) tabelaArquivos.getModel();
                    model.setRowCount(0);
                    for (File arquivo : todosArquivos) {
                        if (arquivo.isFile()) {
                            if (filtraArquivos(arquivo.getName())) {
                                model.addRow(new Object[]{true, arquivo.getName(), (arquivo.length() / 1024)});
                            }
                        } else if (arquivo.isDirectory() && !pastasIgnoradas.contains(arquivo.getName().toLowerCase())) {
                            File[] novaPasta = arquivo.listFiles();
                            for (File arquivoInterno : novaPasta) {
                                if (filtraArquivos(arquivoInterno.getName())) {
                                    model.addRow(new Object[]{true, arquivo.getName() + " / " + arquivoInterno.getName(), (arquivoInterno.length() / 1024)});
                                }
                            }
                        }
                    }
                }

                atualizaQtdFiles();
                statusSistema.setText("Selecione os arquivos do backup");
                barraProgresso(false);
            }
        });
        t.start();
    }

    private void barraProgresso(Boolean ativa) {
        progresso.setMaximum(1);
        progresso.setIndeterminate(ativa);
        if (ativa) {
            progresso.setValue(1);
        }else{
            progresso.setValue(0);
        }
    }

    private void atualizaQtdFiles() {
        DefaultTableModel model = (DefaultTableModel) tabelaArquivos.getModel();
        qtdFiles = model.getRowCount();
        tamanhoArquivos = 0;
        for (int i = 0; i < qtdFiles; i++) {
            Boolean s = (Boolean) model.getValueAt(i, 0);
            if (!s) {
                qtdFiles--;
            } else {
                tamanhoArquivos += ((long) model.getValueAt(i, 2) * 1024);
            }
        }
        txtQtdArquivos.setText(String.valueOf(qtdFiles) + " arquivos, cerca de " + humanReadableByteCount(tamanhoArquivos, true));
        if (qtdFiles == 0) {
            File pasta = new File(txtOrigem.getText());
            if (pasta.isDirectory()) {
                JOptionPane.showMessageDialog(this, "Nenhum arquivo encontrado nessa pasta, \nSelecione a pasta do sistema e as extensões desejadas");
            } else if (txtOrigem.getText().equals("")) {
                JOptionPane.showMessageDialog(this, "Selecione a pasta do sistema primeiramente");
            }
            salvaBackup.setEnabled(false);
        } else if(btSelecionar.isEnabled()) {
            salvaBackup.setEnabled(true);
        }

    }

    public static String humanReadableByteCount(long bytes, boolean si) {
        int unit = si ? 1024 : 1024;
        if (bytes < unit) {
            return bytes + " B";
        }
        int exp = (int) (Math.log(bytes) / Math.log(unit));
        String pre = (si ? "kMGTPE" : "KMGTPE").charAt(exp - 1) + (si ? "" : "i");
        return String.format("%.1f %sB", bytes / Math.pow(unit, exp), pre);
    }

    private void getExtSelecionadas() throws UnsupportedEncodingException, IOException {
        Configuracoes cfg = new Configuracoes();
        String exts = cfg.getPropriedade("extensoes_ativas");
        extSelecionadas = Arrays.asList(exts.split("/"));
        if (!exts.equals("")) {
            txtExtSelecionandas.setText("<html>Extensões: <b>" + extSelecionadas.toString() + "</b></html>");
        } else {
            txtExtSelecionandas.setText("Nenhuma extensão selecionada");
        }
        getPastasIgnoradas();
    }

    private void getPastasIgnoradas() throws UnsupportedEncodingException, IOException {
        Configuracoes cfg = new Configuracoes();
        String exts = cfg.getPropriedade("pastas_ignoradas");
        pastasIgnoradas = Arrays.asList(exts.toLowerCase().split(","));
    }

    private boolean filtraArquivos(String nome) {
        if (!nome.toLowerCase().contains("slccep")) {
            String ext = getFileExtension(nome).toLowerCase();
            return extSelecionadas.contains(ext);
        } else {
            return false;
        }
    }

    private String getFileExtension(String name) {
        try {
            return name.substring(name.lastIndexOf(".") + 1);
        } catch (Exception e) {
            return "";
        }
    }

    private void backupPostgres() throws IOException, InterruptedException {
        Thread t = new Thread(new Runnable() {
            public void run() {
                try {
                    habilitaComandos(false);
                    statusSistema.setText("Fazendo backup do PostgreSQL");
                    barraProgresso(true);
                    Configuracoes cfg = new Configuracoes();
                    List<String> comandos = new ArrayList<>();
                    comandos.add(cfg.getPropriedade("caminho_post") + "\\pg_dump.exe");
                    comandos.add("-i");
                    comandos.add("-h");
                    comandos.add(cfg.getPropriedade("servidor_post"));
                    comandos.add("-p");
                    comandos.add(cfg.getPropriedade("porta_post"));
                    comandos.add("-U");
                    comandos.add(cfg.getPropriedade("usuario_post"));
                    comandos.add("-F");
                    comandos.add("tar");
                    comandos.add("-f");
                    comandos.add(txtOrigem.getText() + "\\PostgresMakito" + dataBackup() + ".backup");
                    comandos.add(cfg.getPropriedade("banco_post"));
                    ProcessBuilder builder = new ProcessBuilder(comandos);
                    builder.environment().put("PGPASSWORD", cfg.getPropriedade("senha_post"));
                    builder.redirectErrorStream(true);
                    Process p = builder.start();
                    BufferedReader r = new BufferedReader(new InputStreamReader(p.getInputStream()));
                    String line;
                    while (true) {
                        line = r.readLine();
                        if (line == null) {
                            break;
                        }
                        int dialogResult = JOptionPane.showConfirmDialog(null, "Ocorreu o seguinte erro: \n**" + line + "**\nDeseja continuar o backup?", "Erro no Backup do PostgreSQL", JOptionPane.YES_NO_OPTION);
                        if (dialogResult == JOptionPane.NO_OPTION) {
                            System.exit(0);
                        }
                    }
                    File postgresBk = new File(txtOrigem.getText() + "\\PostgresMakito" + dataBackup() + ".backup");
                    DefaultTableModel model = (DefaultTableModel) tabelaArquivos.getModel();
                    model.addRow(new Object[]{true, postgresBk.getName(), (postgresBk.length() / 1024)});
                    atualizaQtdFiles();
                    barraProgresso(false);
                    statusSistema.setText("Backup Postgres finalizado");
                    copiarArquivos();
                } catch (UnsupportedEncodingException ex) {
                    Logger.getLogger(FrmInicio.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(FrmInicio.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        t.start();

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmInicio.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmInicio.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmInicio.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmInicio.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmInicio().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btExtensoes;
    private javax.swing.JButton btIgnoraPasta;
    private javax.swing.JButton btSelecionar;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblPostgres;
    private javax.swing.JProgressBar progresso;
    private javax.swing.JButton salvaBackup;
    private javax.swing.JLabel statusSistema;
    private javax.swing.JTable tabelaArquivos;
    private javax.swing.JTextField txtDestino;
    private javax.swing.JLabel txtExtSelecionandas;
    private javax.swing.JTextField txtOrigem;
    private javax.swing.JLabel txtQtdArquivos;
    // End of variables declaration//GEN-END:variables
}
